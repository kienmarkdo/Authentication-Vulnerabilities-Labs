Lab 08 - 2FA broken logic

End goal: Exploit 2FA logic flaw to access Carlos' account.

Given information:
- Your credentials: wiener:peter
- Victim's username: carlos

Analysis:

- Figure out how the app works
    - Upon login, the app
        - Makes a POST request to /login endpoint with username=wiener&password=peter
        - Redirects to GET request /login2 endpoint which sends a 4-digit security code to email address for 2FA
            - Notice that in the request field, we have: Cookie: verify=wiener; session=8nQ2KU1B84rvhmIWP22zs4XZYNEJkmR5
            - the session token is normal, but the verify token looks vulnerable as we can just change the username to another username
            - we still need access to the user's associated email though...
            - let's try to modify the request in Burp Repeater to: Cookie: verify=carlos
            - the request worked even though it shouldn't, because we removed the session token
            - we do not have access to Carlos' email client, so this method won't work
                - So far we've found two vulnerabilities.
                - One is that it depends on client side parameters to perform authentication decisions.
                - And two, the session management in this application is broken because we removed our session token
                yet it's still giving us access to the "Please enter your 4-digit security code" page.
    - Need to find 3rd vulnerability to find Carlos' account
        - Examine POST request to /login2 endpoint AFTER entering the 4 digit MFA code, looking closely at the following fields:
            - Cookie: verify=wiener; session=sWwEdHFVUNgpUTKAnUJK0NDf1tDFEBug
            - mfa-code=1732
        - Modify the POST request in Burp Repeater and click Send
            - Cookie: verify=wiener
            - mfa-code=1732
        - The above POST request works as it still redirects us to /my-account and gives us a 302 Found code
        - This means that the session token does not actually matter during our 2FA process
        - All you need is the correct 2FA code that is associated with the username
        - Therefore, the account's password is not actually needed at all in order to login.
        - All we need to do is guess the target account's 2FA code.
        - Modify the POST request in Burp Repeater and click Send
            - Cookie: verify=carlos
            - mfa-code=1732
            - Result: Incorrect Security Code
        - All we need to do is brute force the "mfa-code=" field until the app logs us in
        - After a few manual attempts to login with Carlos with different mfa codes, it appears that there are no mfa brute-force prevention mechanism in place,
            therefore, we can script this brute-force attack or use Burp Intruder.
    - Summary of main vulnerability
        - Valid username/password is only needed to redirect the client to the 2FA page/endpoint.
        - Once we use our valid wiener:peter credentials to do that, we have successfully obtained the valid endpoint and can send it to Burp Repeater to be modified
        - All we need to do now is remove the session token, change the verify=<username> field in Cookie to the target user (in this case, carlos)
            then brute-force the mfa-code field until the correct code is entered.
        - Once the correct code is entered and the request is sent, we will have successfully logged in with the target user (carlos)

NOTE: If use Burp Intruder, use Sniper attack, Brute Forcer, min/max length to 4, character set to 0123456789. There will be 10,000 requests.

======================================================================================================================================================================
Python script usage and output:

This one requires a manual set up before running the script

1. Open Burp Browser and go to URL: https://0acb00fb037563ce86e58aa0001f004d.web-security-academy.net/
2. My account -> login with wiener:peter
3. Email client -> copy 4 digit code -> paste it into 2FA login page and press Enter
4. In Burp HTTP History, send the most recent /login2 POST request to Repeater
5. In the Cookie header, paste the session token into the value of the session object in the Python code + the mfa-code value as well
6. Execute the Python script